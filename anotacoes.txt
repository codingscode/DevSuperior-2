


https://start.spring.io/
http://localhost:8080/
tem-se na tela:
----------------
Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Mon Jan 04 22:37:40 BRST 2021
There was an unexpected error (type=Not Found, status=404).
-------------------

ir no arquivo pom.xml
    apagar o conteudo da tag "dependencies" e colar o seguinte:
          <dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<dependency>
	<groupId>com.h2database</groupId>
	<artifactId>h2</artifactId>
	<scope>runtime</scope>
</dependency>

<dependency>
	<groupId>org.postgresql</groupId>
	<artifactId>postgresql</artifactId>
	<scope>runtime</scope>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-test</artifactId>
	<scope>test</scope>
</dependency>


esperar a download automatico

-------------------

ir em src/main/resources -> application.properties -> e colar:
     spring.profiles.active=test

     spring.jpa.open-in-view=false

-----------

no mesmo local criar arquivo com nome "application-test.properties" e com conteudo de :
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

------------------

no mesmo local criar arquivo com nome "application-dev.properties" e conteudo:
spring.datasource.url=${DATABASE_URL}

---------------

criação de uma classe "SecurityConfig"

colar código e usar atalho ctrl + shift + o para fazer os imports

------------------

digitar no navegador:
http://localhost:8080/
http://localhost:8080/h2-console

--------------

rodar projeto e em "http://localhost:8080/h2-console":
    e no campo "JDBC URL" digitar o mesmo no arquivo "application-test.properties", -> "jdbc:h2:mem:testdb"
    depois clicar em "Connect"

--------------

em src/main/resources criar arquivo com nome "data.sql" e colar codigo.

entrar em "http://localhost:8080/h2-console", em "TB_PRODUCT" clicar em "Run" e ver a tabela.

--------------

rodar programa

abrir o software postman:
ir em "Collections" -> criar collection "DSDeliver" -> depois de criado ir em "addrequest" -> em "GET" digitar "http://localhost:8080/products" -> clicar em save e send.
ver de novo a requisição
... -> em "GET" digitar "http://localhost:8080/orders" -> clicar em save e send.

... -> em "POST" (trocar o método), nova coleção "New order" digitar "http://localhost:8080/orders" -> clicar em save e send.
Na aba "Body" -> row/JSON , digitar no corpo:
{
   "address": "Avenida Paulista, 1500",
   "latitude": "-23.56168",
   "longitude": "-46.656139",
   "products": [
       {"id": 2},
       {"id": 5}
   ]
}

clicar em send.
aparece:
{
    "id": 8,
    "address": "Avenida Paulista, 1500",
    "latitude": -23.56168,
    "longitude": -46.656139,
    "moment": "2021-01-06T15:23:33.417168900Z",
    "status": "PENDING",
    "products": [
        {
            "id": 2,
            "name": "Pizza Moda da Casa",
            "price": 59.9,
            "description": "Pizza à moda da casa, com molho especial e todos ingredientes básicos, e queijo à sua escolha.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/pizza_moda.jpg"
        },
        {
            "id": 5,
            "name": "Risoto Funghi",
            "price": 59.95,
            "description": "Risoto Funghi feito com ingredientes finos e o toque especial do chef.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/risoto_funghi.jpg"
        }
    ]
}

--------------------------

observar o id=3 e seu status é 0.
abrir o software postman:
    criar coleção "Set delivered", método "put" e endereço "http://localhost:8080/orders/3/delivered", clicar save e send.
 aparece:
------------
{
    "id": 3,
    "address": "Avenida Paulista, 1500",
    "latitude": -25.439787,
    "longitude": -49.237759,
    "moment": "2021-01-01T16:00:00Z",
    "status": "DELIVERED",
    "products": [
        {
            "id": 3,
            "name": "Pizza Portuguesa",
            "price": 45.0,
            "description": "Pizza Portuguesa com molho especial, mussarela, presunto, ovos e especiarias.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/pizza_portuguesa.jpg"
        },
        {
            "id": 4,
            "name": "Risoto de Carne",
            "price": 52.0,
            "description": "Risoto de carne com especiarias e um delicioso molho de acompanhamento.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/risoto_carne.jpg"
        }
    ]
}
------------
observar o id=3 e seu status é 1.

















































