


https://start.spring.io/
http://localhost:8080/
tem-se na tela:
----------------
Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Mon Jan 04 22:37:40 BRST 2021
There was an unexpected error (type=Not Found, status=404).
-------------------

ir no arquivo pom.xml
    apagar o conteudo da tag "dependencies" e colar o seguinte:
          <dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<dependency>
	<groupId>com.h2database</groupId>
	<artifactId>h2</artifactId>
	<scope>runtime</scope>
</dependency>

<dependency>
	<groupId>org.postgresql</groupId>
	<artifactId>postgresql</artifactId>
	<scope>runtime</scope>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-test</artifactId>
	<scope>test</scope>
</dependency>


esperar a download automatico

-------------------

ir em src/main/resources -> application.properties -> e colar:
     spring.profiles.active=test

     spring.jpa.open-in-view=false

-----------

no mesmo local criar arquivo com nome "application-test.properties" e com conteudo de :
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

------------------

no mesmo local criar arquivo com nome "application-dev.properties" e conteudo:
spring.datasource.url=${DATABASE_URL}

---------------

criação de uma classe "SecurityConfig"

colar código e usar atalho ctrl + shift + o para fazer os imports

------------------

digitar no navegador:
http://localhost:8080/
http://localhost:8080/h2-console

--------------

rodar projeto e em "http://localhost:8080/h2-console":
    e no campo "JDBC URL" digitar o mesmo no arquivo "application-test.properties", -> "jdbc:h2:mem:testdb"
    depois clicar em "Connect"

--------------

em src/main/resources criar arquivo com nome "data.sql" e colar codigo.

entrar em "http://localhost:8080/h2-console", em "TB_PRODUCT" clicar em "Run" e ver a tabela.

--------------

rodar programa

abrir o software postman:
ir em "Collections" -> criar collection "DSDeliver" -> depois de criado ir em "addrequest" -> em "GET" digitar "http://localhost:8080/products" -> clicar em save e send.
ver de novo a requisição
... -> em "GET" digitar "http://localhost:8080/orders" -> clicar em save e send.

... -> em "POST" (trocar o método), nova coleção "New order" digitar "http://localhost:8080/orders" -> clicar em save e send.
Na aba "Body" -> row/JSON , digitar no corpo:
{
   "address": "Avenida Paulista, 1500",
   "latitude": "-23.56168",
   "longitude": "-46.656139",
   "products": [
       {"id": 2},
       {"id": 5}
   ]
}

clicar em send.
aparece:
{
    "id": 8,
    "address": "Avenida Paulista, 1500",
    "latitude": -23.56168,
    "longitude": -46.656139,
    "moment": "2021-01-06T15:23:33.417168900Z",
    "status": "PENDING",
    "products": [
        {
            "id": 2,
            "name": "Pizza Moda da Casa",
            "price": 59.9,
            "description": "Pizza à moda da casa, com molho especial e todos ingredientes básicos, e queijo à sua escolha.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/pizza_moda.jpg"
        },
        {
            "id": 5,
            "name": "Risoto Funghi",
            "price": 59.95,
            "description": "Risoto Funghi feito com ingredientes finos e o toque especial do chef.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/risoto_funghi.jpg"
        }
    ]
}

--------------------------

observar o id=3 e seu status é 0.
abrir o software postman:
    criar coleção "Set delivered", método "put" e endereço "http://localhost:8080/orders/3/delivered", clicar save e send.
 aparece:
------------
{
    "id": 3,
    "address": "Avenida Paulista, 1500",
    "latitude": -25.439787,
    "longitude": -49.237759,
    "moment": "2021-01-01T16:00:00Z",
    "status": "DELIVERED",
    "products": [
        {
            "id": 3,
            "name": "Pizza Portuguesa",
            "price": 45.0,
            "description": "Pizza Portuguesa com molho especial, mussarela, presunto, ovos e especiarias.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/pizza_portuguesa.jpg"
        },
        {
            "id": 4,
            "name": "Risoto de Carne",
            "price": 52.0,
            "description": "Risoto de carne com especiarias e um delicioso molho de acompanhamento.",
            "imageUri": "https://raw.githubusercontent.com/devsuperior/sds2/master/assets/risoto_carne.jpg"
        }
    ]
}
------------
observar o id=3 e seu status é 1.


abrir pgAdmin(do postgrl):
   criar database "dsdelivered"
   

no springboot, no arquivo src/main/resources -> application.properties:
   modificar arquivo e mudar uma linha para -> spring.profiles.active=dev
   observar arquivo application-dev.properties e descomentar as linhas comentadas

rodar projeto
observar senha, deve ser a mesma. Mudei a senha de "1234567" para "din1". tava dando erro.
um arquivo create.sql é criado

copiar o conteudo do arquivo "create.sql" e colar em pgAdmin -> banco de dados "dsdeliver" -> schemas -> public -> mouse bdireito -> query tool -> colar em query editor ->

create table tb_order (id int8 generated by default as identity, address varchar(255), latitude float8, longitude float8, moment timestamp, status int4, primary key (id));
create table tb_order_product (order_id int8 not null, product_id int8 not null, primary key (order_id, product_id));
create table tb_product (id int8 generated by default as identity, description varchar(255), image_uri varchar(255), name varchar(255), price float8, primary key (id));
alter table if exists tb_order_product add constraint FKsu03ywlcvyqg5y78qey2q25lc foreign key (product_id) references tb_product;
alter table if exists tb_order_product add constraint FK40anaevs16kmc2tbh7wc511fq foreign key (order_id) references tb_order;

e clicar no botao executar

em public ver "Tables"

comentar de novo as 4 linhas que antes estavam comentadas

o arquivo create.sql antes do commit seguinte é desnecessario e será apagado.

copiar conteudo do arquivo "data.sql" para pgAdmin e colar query editor e executar.

depois em cada tabela ir em view/edit data -> all rows

ir no site do heroku
   criar new app
   copiar "postgres://ibooklhoxxgddx:8118f4040d5a997fc0306aa84136c8f5b493adbda98b2b14d2fed17194f52cc8@ec2-52-71-153-228.compute-1.amazonaws.com:5432/d6p43u7tbnurb0"

   postgres://
   ibooklhoxxgddx
   :
   8118f4040d5a997fc0306aa84136c8f5b493adbda98b2b14d2fed17194f52cc8
   @
   ec2-52-71-153-228.compute-1.amazonaws.com
   :
   5432
   /
   d6p43u7tbnurb0


em pgAdmin:
   criar em Servers:

ajeitando.
postgres://vjvdjfgermdpxg:0596c5e9ebc19702cad6eaf0d6a01e3eb37a5ada2f611de42ab367bc8f76f45f@ec2-50-16-221-180.compute-1.amazonaws.com:5432/d6kpuq1odjadd5

quebrando:
postgres://

vjvdjfgermdpxg  <- usuario
:
0596c5e9ebc19702cad6eaf0d6a01e3eb37a5ada2f611de42ab367bc8f76f45f <-senha
@
ec2-50-16-221-180.compute-1.amazonaws.com   <- host
:
5432  <- porta
/
d6kpuq1odjadd5   <- nome base de dados

   
git subtree push --prefix sds2/backend/dsdeliver heroku main
https://heronnes-sds2.herokuapp.com/





Front-End:

digitar no terminal da pasta:
      npx create-react-app front-web --template typescript --use-npm
      npm start,     ver no browser http://localhost:3000/

aumentando e diminuindo valor de counter

reactrouter.com
no terminal:  npm install react-router-dom 
              npm install @types/react-router-dom
https://reactrouter.com/web/example/basic

clicando em "FAZER PEDIDO" vai para ..../orders

executando o backend com java springboot, mudar uma linha em "application.properties" para "test"

itera sobre a quantidade de listas

continuação do Front:

https://react-leaflet.js.org/

digitar no terminal da pasta: npm install leaflet react-leaflet
                              npm install -D @types/leaflet

import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'

rodando a aplicação o mapa aparece embaralhado

https://react-leaflet.js.org/docs/start-installation
https://leafletjs.com/examples/quick-start/

colar isto em public/index.html
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>

o mapa se organiza agora

https://react-select.com/
digitar no terminal da pasta:  npm install react-select @types/react-select

não consegue pesquisar ainda. dá 401 unauthorized

criar conta no mapbox
digitando aparece os nomes parecidos e selecionando o mapa não atualiza, somente o marcador.
agora faz.

os items selecionados ficam verdes , e desmarcando deixam de ser

já traz a quantidade de produtos selecionados e o preço total

formatando preço

ver https://github.com/fkhadra/react-toastify
    https://fkhadra.github.io/react-toastify/introduction/

digitar no terminal da pasta: npm install --save react-toastify

  import React from 'react';
  import { ToastContainer, toast } from 'react-toastify';

  import 'react-toastify/dist/ReactToastify.css';
  // minified version is also included
  // import 'react-toastify/dist/ReactToastify.min.css';

  function App(){
    const notify = () => toast("Wow so easy !");

    return (
      <div>
        <button onClick={notify}>Notify !</button>
        <ToastContainer />
      </div>
    );
  }

clicar em fazer pedido



